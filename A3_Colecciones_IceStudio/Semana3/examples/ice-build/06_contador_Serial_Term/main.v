// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main #(
 parameter v384ddf = 1
) (
 input vf0b97b,
 input vclk,
 output vaad62c,
 output [0:7] vinit
);
 localparam p4 = v384ddf;
 wire [0:15] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire w3;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign vaad62c = w5;
 assign w7 = vf0b97b;
 assign w8 = vclk;
 assign w9 = vclk;
 assign w10 = vclk;
 assign w6 = w3;
 assign w9 = w8;
 assign w10 = w8;
 assign w10 = w9;
 vd014cb vee5a90 (
  .vb86fe4(w1),
  .v7c533e(w3),
  .ve61673(w7),
  .vdd729a(w8)
 );
 vd37f58 v2d41f9 (
  .vef358d(w0),
  .vd615f3(w5),
  .v63c6a8(w6),
  .v4a5a99(w9)
 );
 v1e224f v1d5f16 (
  .v4d4dee(w0),
  .vd34531(w1),
  .v385b9c(w2)
 );
 v3bf99b v8abe26 (
  .vb096dc(w2)
 );
 va9a5bc #(
  .vfb06ae(p4)
 ) v9649dc (
  .v2a8434(w3),
  .vac0eb2(w10)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module vd014cb #(
 parameter v5e4a03 = 256
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [7:0] vb86fe4,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vb86fe4 = w5;
 vd014cb_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-8bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador m√≥dulo M, ascendente, de 8 bits, con reset 
/*-------------------------------------------------*/

module vd014cb_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [7:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 8; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 0;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module vd37f58 #(
 parameter v06ddf4 = 6,
 parameter vfa04f4 = 48,
 parameter v6f208b = 15,
 parameter vafabd5 = 115200
) (
 input v4a5a99,
 input [15:0] vef358d,
 input v63c6a8,
 output v6f7cd7,
 output vd615f3,
 output v2aad4f
);
 localparam p9 = v06ddf4;
 localparam p11 = vfa04f4;
 localparam p12 = vafabd5;
 localparam p27 = v6f208b;
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire [0:3] w8;
 wire [0:7] w10;
 wire w13;
 wire [0:15] w14;
 wire [0:2] w15;
 wire w16;
 wire w17;
 wire w18;
 wire w19;
 wire w20;
 wire w21;
 wire [0:3] w22;
 wire [0:7] w23;
 wire w24;
 wire [0:7] w25;
 wire [0:3] w26;
 wire [0:7] w28;
 wire w29;
 wire w30;
 wire w31;
 assign vd615f3 = w13;
 assign w14 = vef358d;
 assign v2aad4f = w17;
 assign w20 = v63c6a8;
 assign w21 = v4a5a99;
 assign w29 = v4a5a99;
 assign w30 = v4a5a99;
 assign v6f7cd7 = w31;
 assign w6 = w5;
 assign w8 = w5;
 assign w8 = w6;
 assign w26 = w7;
 assign w29 = w21;
 assign w30 = w21;
 assign w30 = w29;
 v1daff9 vecdba2 (
  .v07d992(w0),
  .vdef77e(w1),
  .v448378(w2),
  .vd3634f(w3),
  .vb41aff(w4),
  .v610066(w14),
  .v1a2eda(w18),
  .v4ff3fa(w20),
  .v729b34(w21)
 );
 v622899 ve51cc7 (
  .vc4a24a(w0),
  .v3bc648(w1),
  .vf097c4(w2),
  .v12b9fb(w3),
  .v8010da(w4),
  .ve6b4f6(w5),
  .vae4977(w6),
  .v65cd9b(w7),
  .v97d40b(w15),
  .v220323(w22)
 );
 va0b8df veadf85 (
  .va50a91(w5)
 );
 v917222 v6006cc (
  .v766044(w7),
  .v285646(w8),
  .va191ad(w10)
 );
 v7d7474 #(
  .v8d305c(p11)
 ) v6b6e26 (
  .ve41da3(w10),
  .v9c083a(w23)
 );
 vc6459c #(
  .ved2ada(p12)
 ) v3e4536 (
  .v8caaa5(w13),
  .v05e99b(w16),
  .v01321e(w19),
  .v19b8dd(w28),
  .ve9a78f(w29)
 );
 ve308ae #(
  .vaceb8f(p9)
 ) v3a1091 (
  .v8b9e30(w15),
  .v69602e(w16),
  .v8314fa(w17),
  .vbdbcb4(w18),
  .v87e8cb(w19),
  .v192615(w30),
  .v680136(w31)
 );
 v359a55 v223c42 (
  .vd6b984(w23),
  .v50d6c6(w24),
  .v02d898(w25),
  .vf24dba(w28)
 );
 v53f10a ve1a050 (
  .va50a91(w22)
 );
 v0b4097 #(
  .v6b316b(p27)
 ) v4af606 (
  .v18e78c(w24),
  .vdb52ce(w26)
 );
 va0b5a4 vf2cb27 (
  .vb096dc(w25)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bin2ASCII_16bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 16 bits binary to ASCII converter.
/*-------------------------------------------------*/
//---- Top entity
module v1daff9 (
 input v729b34,
 input [15:0] v610066,
 input v4ff3fa,
 output [3:0] vb41aff,
 output [3:0] vd3634f,
 output [3:0] v448378,
 output [3:0] vdef77e,
 output [3:0] v07d992,
 output v1a2eda
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire [0:3] w13;
 wire [0:3] w14;
 wire [0:3] w15;
 wire [0:3] w16;
 wire [0:3] w17;
 wire [0:15] w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 assign w5 = v729b34;
 assign w6 = v729b34;
 assign w7 = v729b34;
 assign w8 = v729b34;
 assign w9 = v729b34;
 assign w10 = v729b34;
 assign v1a2eda = w11;
 assign w12 = v729b34;
 assign vb41aff = w13;
 assign vd3634f = w14;
 assign v448378 = w15;
 assign vdef77e = w16;
 assign v07d992 = w17;
 assign w18 = v610066;
 assign w19 = v4ff3fa;
 assign w6 = w5;
 assign w7 = w5;
 assign w7 = w6;
 assign w8 = w5;
 assign w8 = w6;
 assign w8 = w7;
 assign w9 = w5;
 assign w9 = w6;
 assign w9 = w7;
 assign w9 = w8;
 assign w10 = w5;
 assign w10 = w6;
 assign w10 = w7;
 assign w10 = w8;
 assign w10 = w9;
 assign w12 = w5;
 assign w12 = w6;
 assign w12 = w7;
 assign w12 = w8;
 assign w12 = w9;
 assign w12 = w10;
 assign w21 = w20;
 assign w22 = w20;
 assign w22 = w21;
 assign w23 = w20;
 assign w23 = w21;
 assign w23 = w22;
 assign w24 = w20;
 assign w24 = w21;
 assign w24 = w22;
 assign w24 = w23;
 assign w25 = w20;
 assign w25 = w21;
 assign w25 = w22;
 assign w25 = w23;
 assign w25 = w24;
 v507b03 vccd39d (
  .v4fca7e(w0),
  .vad2d9b(w1),
  .v2100e8(w2),
  .v5a9c44(w3),
  .v516e80(w4),
  .ve2e923(w6),
  .vdf1a69(w18),
  .vd55ecf(w19),
  .veec965(w20)
 );
 vfa0a5e v902493 (
  .v565097(w4),
  .v41eb95(w5),
  .va632a5(w13),
  .vf892a0(w24)
 );
 vfa0a5e ve4d6fe (
  .v565097(w3),
  .v41eb95(w7),
  .va632a5(w14),
  .vf892a0(w23)
 );
 vfa0a5e vc363c4 (
  .v565097(w2),
  .v41eb95(w8),
  .va632a5(w15),
  .vf892a0(w22)
 );
 vfa0a5e vac34fd (
  .v565097(w1),
  .v41eb95(w9),
  .va632a5(w16),
  .vf892a0(w21)
 );
 vfa0a5e vf6c606 (
  .v565097(w0),
  .v41eb95(w10),
  .va632a5(w17),
  .vf892a0(w20)
 );
 v1c7dae vfce172 (
  .ve8318d(w11),
  .va4102a(w12),
  .vf54559(w25)
 );
endmodule

/*-------------------------------------------------*/
/*-- bin2BCD_fix_16bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Convert a binary number into BCD. This module retains the BCD output value (memory) and is arranged in reverse to facilitate connections.
/*-------------------------------------------------*/
//---- Top entity
module v507b03 #(
 parameter vf467c7 = 16
) (
 input ve2e923,
 input [15:0] vdf1a69,
 input vd55ecf,
 output [3:0] v4fca7e,
 output [3:0] vad2d9b,
 output [3:0] v2100e8,
 output [3:0] v5a9c44,
 output [3:0] v516e80,
 output vbf6b8c,
 output veec965
);
 localparam p8 = vf467c7;
 wire [0:3] w0;
 wire [0:3] w1;
 wire w2;
 wire [0:3] w3;
 wire w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire [0:3] w14;
 wire [0:3] w15;
 wire [0:3] w16;
 wire [0:3] w17;
 wire [0:3] w18;
 wire [0:3] w19;
 wire w20;
 wire [0:3] w21;
 wire [0:3] w22;
 wire [0:3] w23;
 wire [0:3] w24;
 wire w25;
 wire [0:3] w26;
 wire [0:3] w27;
 wire [0:3] w28;
 wire [0:3] w29;
 wire w30;
 wire w31;
 wire w32;
 wire w33;
 wire w34;
 wire w35;
 wire w36;
 wire w37;
 wire w38;
 wire w39;
 wire w40;
 wire w41;
 wire w42;
 wire w43;
 wire w44;
 wire w45;
 wire w46;
 wire w47;
 wire w48;
 wire w49;
 wire [0:15] w50;
 wire w51;
 wire w52;
 assign w13 = vd55ecf;
 assign v5a9c44 = w14;
 assign v516e80 = w15;
 assign v2100e8 = w18;
 assign vad2d9b = w23;
 assign v4fca7e = w28;
 assign w31 = ve2e923;
 assign w32 = ve2e923;
 assign w33 = ve2e923;
 assign w34 = ve2e923;
 assign w35 = ve2e923;
 assign w36 = ve2e923;
 assign w37 = ve2e923;
 assign w38 = ve2e923;
 assign w50 = vdf1a69;
 assign vbf6b8c = w51;
 assign veec965 = w52;
 assign w11 = w10;
 assign w14 = w6;
 assign w15 = w3;
 assign w18 = w17;
 assign w23 = w22;
 assign w28 = w27;
 assign w32 = w31;
 assign w33 = w31;
 assign w33 = w32;
 assign w34 = w31;
 assign w34 = w32;
 assign w34 = w33;
 assign w35 = w31;
 assign w35 = w32;
 assign w35 = w33;
 assign w35 = w34;
 assign w36 = w31;
 assign w36 = w32;
 assign w36 = w33;
 assign w36 = w34;
 assign w36 = w35;
 assign w37 = w31;
 assign w37 = w32;
 assign w37 = w33;
 assign w37 = w34;
 assign w37 = w35;
 assign w37 = w36;
 assign w38 = w31;
 assign w38 = w32;
 assign w38 = w33;
 assign w38 = w34;
 assign w38 = w35;
 assign w38 = w36;
 assign w38 = w37;
 assign w40 = w39;
 assign w41 = w39;
 assign w41 = w40;
 assign w42 = w39;
 assign w42 = w40;
 assign w42 = w41;
 assign w43 = w39;
 assign w43 = w40;
 assign w43 = w41;
 assign w43 = w42;
 assign w44 = w9;
 assign w45 = w9;
 assign w45 = w44;
 assign w46 = w9;
 assign w46 = w44;
 assign w46 = w45;
 assign w47 = w9;
 assign w47 = w44;
 assign w47 = w45;
 assign w47 = w46;
 assign w48 = w9;
 assign w48 = w44;
 assign w48 = w45;
 assign w48 = w46;
 assign w48 = w47;
 assign w49 = w9;
 assign w49 = w44;
 assign w49 = w45;
 assign w49 = w46;
 assign w49 = w47;
 assign w49 = w48;
 v1c700b vc8bdc4 (
  .v64516e(w1),
  .v16b24b(w3)
 );
 v1c700b v4cb6ee (
  .v64516e(w0),
  .v16b24b(w6)
 );
 v5d441c v868ca8 (
  .vdf974f(w0),
  .vc11e8c(w2),
  .v3446ab(w7),
  .vb004a6(w20)
 );
 v5d441c v570883 (
  .vdf974f(w1),
  .vb004a6(w2),
  .vc11e8c(w4),
  .v3446ab(w5)
 );
 va3c966 v6afd61 (
  .va632a5(w3),
  .v565097(w5),
  .v41eb95(w35),
  .veaee74(w43),
  .vf892a0(w48)
 );
 va3c966 vfb15bc (
  .va632a5(w6),
  .v565097(w7),
  .v41eb95(w34),
  .veaee74(w42),
  .vf892a0(w47)
 );
 v438ded vad01be (
  .vf2d070(w10),
  .vb414d8(w12),
  .v143ae2(w13),
  .v68780b(w36),
  .v3525a9(w39),
  .v078fce(w51),
  .vd82121(w52)
 );
 v1c700b vf414bf (
  .v64516e(w16),
  .v16b24b(w17)
 );
 v5d441c v89fb17 (
  .vdf974f(w16),
  .v3446ab(w19),
  .vc11e8c(w20),
  .vb004a6(w25)
 );
 va3c966 v6abff8 (
  .va632a5(w17),
  .v565097(w19),
  .v41eb95(w33),
  .veaee74(w41),
  .vf892a0(w46)
 );
 vefe39a #(
  .vaceb8f(p8)
 ) vb4c9f8 (
  .v69602e(w9),
  .v87e8cb(w9),
  .vbdbcb4(w10),
  .v8314fa(w12),
  .v192615(w37)
 );
 v1c700b v9c8bce (
  .v64516e(w21),
  .v16b24b(w22)
 );
 v5d441c v2c80a5 (
  .vdf974f(w21),
  .v3446ab(w24),
  .vc11e8c(w25),
  .vb004a6(w30)
 );
 va3c966 v9560e6 (
  .va632a5(w22),
  .v565097(w24),
  .v41eb95(w32),
  .veaee74(w40),
  .vf892a0(w45)
 );
 v4e77a0 vab7e6c (
  .v0d3330(w4),
  .v9bfaa9(w11),
  .v4a6801(w38),
  .v7d29fb(w49),
  .v545269(w50)
 );
 v1c700b vf1aa03 (
  .v64516e(w26),
  .v16b24b(w27)
 );
 v5d441c v1d15f4 (
  .vdf974f(w26),
  .v3446ab(w29),
  .vc11e8c(w30)
 );
 va3c966 vb81acb (
  .va632a5(w27),
  .v565097(w29),
  .v41eb95(w31),
  .veaee74(w39),
  .vf892a0(w44)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bin2BCD-seq-16bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- M√°quina de conversion Binario - BCD de 16 bits
/*-------------------------------------------------*/
//---- Top entity
module v1c700b #(
 parameter v718b87 = 3,
 parameter v52d37a = 5
) (
 input [3:0] v16b24b,
 output [3:0] v64516e
);
 localparam p0 = v718b87;
 localparam p2 = v52d37a;
 wire [0:3] w1;
 wire w3;
 wire [0:3] w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 assign v64516e = w4;
 assign w5 = v16b24b;
 assign w6 = v16b24b;
 assign w7 = v16b24b;
 assign w6 = w5;
 assign w7 = w5;
 assign w7 = w6;
 v04dced #(
  .v8d305c(p0)
 ) v501882 (
  .vbfafa4(w1),
  .v56adce(w5)
 );
 v4cd375 v67b4ae (
  .vcc5082(w1),
  .v50d6c6(w3),
  .v47cad9(w4),
  .vd3165b(w6)
 );
 v0d4efc #(
  .v16d6b8(p2)
 ) v02d414 (
  .v18e78c(w3),
  .v39c58f(w7)
 );
endmodule

/*-------------------------------------------------*/
/*-- Bin2BCD-comb-unit  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- C√°lculo combinacional parcial para la conversion de Binario a BCD
/*-------------------------------------------------*/
//---- Top entity
module v04dced #(
 parameter v8d305c = 1
) (
 input [3:0] v56adce,
 output [3:0] vbfafa4
);
 localparam p0 = v8d305c;
 wire [0:3] w1;
 wire [0:3] w2;
 assign w1 = v56adce;
 assign vbfafa4 = w2;
 v04dced_va0c26a #(
  .k(p0)
 ) va0c26a (
  .a(w1),
  .s(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- sum-1op-4bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de un operando de 4 bits con una constante pasada como par√°metro (No hay accarreo)
/*-------------------------------------------------*/

module v04dced_va0c26a #(
 parameter k = 0
) (
 input [3:0] a,
 output [3:0] s
);
 assign s = a + k;
endmodule
//---- Top entity
module v4cd375 (
 input [3:0] vcc5082,
 input [3:0] vd3165b,
 input v50d6c6,
 output [3:0] v47cad9
);
 wire w0;
 wire [0:3] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 assign w0 = v50d6c6;
 assign v47cad9 = w1;
 assign w2 = vd3165b;
 assign w3 = vcc5082;
 v4cd375_ve4e0df ve4e0df (
  .sel(w0),
  .o(w1),
  .i0(w2),
  .i1(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 2 a 1 de 4 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 2 a 1 de 4 bits
/*-------------------------------------------------*/

module v4cd375_ve4e0df (
 input [3:0] i1,
 input [3:0] i0,
 input sel,
 output [3:0] o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 4 bits
 
 reg [3:0] o;
 
 always @(*) begin
     case(sel)
         0: o = i0;
         1: o = i1;
         default: o = i0;
     endcase
 end
 
 
endmodule
//---- Top entity
module v0d4efc #(
 parameter v16d6b8 = 1
) (
 input [3:0] v39c58f,
 output v18e78c
);
 localparam p1 = v16d6b8;
 wire w0;
 wire [0:3] w2;
 assign v18e78c = w0;
 assign w2 = v39c58f;
 v0d4efc_vd75681 #(
  .B(p1)
 ) vd75681 (
  .eq(w0),
  .a(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Menor-que-1-op  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Comparador menor que, de un operando de 4 bits
/*-------------------------------------------------*/

module v0d4efc_vd75681 #(
 parameter B = 0
) (
 input [3:0] a,
 output eq
);
 assign eq = (a >= B);
endmodule
//---- Top entity
module v5d441c (
 input [3:0] vdf974f,
 input vc11e8c,
 output vb004a6,
 output [3:0] v3446ab
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire w5;
 wire w6;
 assign w3 = vdf974f;
 assign v3446ab = w4;
 assign w5 = vc11e8c;
 assign vb004a6 = w6;
 v45c913 v70703d (
  .v593f43(w0),
  .v2812a7(w1),
  .vc90115(w2),
  .v930b03(w3),
  .v5b73e8(w6)
 );
 vd8f675 vfec9e3 (
  .vee8a83(w0),
  .v1311d2(w1),
  .v77b6c4(w2),
  .v5d9ba2(w4),
  .v03aaf0(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- shift-left-1bit  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Desplazamiento combincional de 1 bit hacia la izquierda (x2)
/*-------------------------------------------------*/
//---- Top entity
module v45c913 (
 input [3:0] v930b03,
 output v5b73e8,
 output vc90115,
 output v2812a7,
 output v593f43
);
 wire [0:3] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = v930b03;
 assign v2812a7 = w1;
 assign v593f43 = w2;
 assign vc90115 = w3;
 assign v5b73e8 = w4;
 v45c913_v9a2a06 v9a2a06 (
  .i(w0),
  .o1(w1),
  .o0(w2),
  .o2(w3),
  .o3(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Separador-bus  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Separador de bus de 4-bits en 4 cables
/*-------------------------------------------------*/

module v45c913_v9a2a06 (
 input [3:0] i,
 output o3,
 output o2,
 output o1,
 output o0
);
 assign o3 = i[3];
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module vd8f675 (
 input v77b6c4,
 input v1311d2,
 input vee8a83,
 input v03aaf0,
 output [3:0] v5d9ba2
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:3] w4;
 assign w0 = vee8a83;
 assign w1 = v03aaf0;
 assign w2 = v1311d2;
 assign w3 = v77b6c4;
 assign v5d9ba2 = w4;
 vd8f675_v9a2a06 v9a2a06 (
  .i1(w0),
  .i0(w1),
  .i2(w2),
  .i3(w3),
  .o(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Agregador-bus  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 4 cables en un bus de 4-bits
/*-------------------------------------------------*/

module vd8f675_v9a2a06 (
 input i3,
 input i2,
 input i1,
 input i0,
 output [3:0] o
);
 assign o = {i3,i2, i1, i0};
 
endmodule
//---- Top entity
module va3c966 #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input veaee74,
 input [3:0] v565097,
 input vf892a0,
 output [3:0] va632a5
);
 localparam p0 = v422d28;
 wire w1;
 wire w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire w5;
 assign w1 = vf892a0;
 assign w2 = v41eb95;
 assign w3 = v565097;
 assign va632a5 = w4;
 assign w5 = veaee74;
 va3c966_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .load(w1),
  .clk(w2),
  .d(w3),
  .q(w4),
  .rst(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Registro  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 4 bits con entrada de reset
/*-------------------------------------------------*/

module va3c966_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input rst,
 input [3:0] d,
 input load,
 output [3:0] q
);
 localparam N = 4;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (rst)
     q <= 0;
   else
     if (load)
       q <= d;
endmodule
//---- Top entity
module v438ded (
 input v68780b,
 input v143ae2,
 input vb414d8,
 output v078fce,
 output v3525a9,
 output vf2d070,
 output vd82121
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign v078fce = w1;
 assign v3525a9 = w3;
 assign w4 = v143ae2;
 assign w5 = vb414d8;
 assign vf2d070 = w6;
 assign vd82121 = w7;
 assign w8 = v68780b;
 assign w9 = v68780b;
 assign w1 = w0;
 assign w2 = w0;
 assign w2 = w1;
 assign w9 = w8;
 vb959c2 v551aec (
  .vb4c770(w0),
  .ve68648(w4),
  .v3c6908(w5),
  .v581b48(w8)
 );
 vc386a7 v838318 (
  .ve78ab8(w0),
  .v3487af(w6),
  .vb1094d(w7),
  .ved8395(w9)
 );
 v35f267 v719db6 (
  .v0e28cb(w2),
  .vcbab45(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Machine-state  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable de almacenamiento del estado de la m√°quina
/*-------------------------------------------------*/
//---- Top entity
module vb959c2 #(
 parameter v679341 = 0
) (
 input v581b48,
 input ve68648,
 input v3c6908,
 output vb4c770
);
 localparam p4 = v679341;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = v581b48;
 assign w1 = ve68648;
 assign w2 = v3c6908;
 assign vb4c770 = w3;
 vb959c2_v4e11b3 #(
  .INI(p4)
 ) v4e11b3 (
  .clk(w0),
  .set(w1),
  .rst(w2),
  .q(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-Set-Reset  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable con entradas de Set y Reset s√≠ncronas, para poner y quitar notaficaciones de eventos
/*-------------------------------------------------*/

module vb959c2_v4e11b3 #(
 parameter INI = 0
) (
 input clk,
 input set,
 input rst,
 output q
);
 reg q = INI;
 
 always @(posedge clk)
   if (set)
     q <= 1'b1;
   else if (rst)
     q<=1'b0;
endmodule
//---- Top entity
module vc386a7 (
 input ved8395,
 input ve78ab8,
 output v3487af,
 output vb1094d
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w0 = ved8395;
 assign w1 = ve78ab8;
 assign v3487af = w2;
 assign vb1094d = w3;
 vc386a7_v287d69 v287d69 (
  .clk(w0),
  .i(w1),
  .up(w2),
  .down(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Detector-flancos  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos
/*-------------------------------------------------*/

module vc386a7_v287d69 (
 input clk,
 input i,
 output up,
 output down
);
 reg q = 0;
 
 always @(posedge clk)
   q <= i;
   
 assign up = (~q & i);  
 assign down = (q & ~i);  
endmodule
//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- NOT  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta NOT
/*-------------------------------------------------*/

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
//---- Top entity
module vefe39a #(
 parameter vaceb8f = 16,
 parameter vc633fb = 1,
 parameter vd99aad = 0
) (
 input v192615,
 input vbdbcb4,
 input v87e8cb,
 output v680136,
 output [3:0] ve7048f,
 output v69602e,
 output v8314fa
);
 localparam p0 = vd99aad;
 localparam p1 = vc633fb;
 localparam p6 = vaceb8f;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w7;
 wire w8;
 wire [0:3] w9;
 wire [0:3] w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire [0:3] w18;
 wire [0:3] w19;
 wire [0:3] w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 assign w7 = vbdbcb4;
 assign w8 = v87e8cb;
 assign w11 = v192615;
 assign w12 = v192615;
 assign w13 = v192615;
 assign v680136 = w14;
 assign ve7048f = w19;
 assign v8314fa = w25;
 assign v69602e = w26;
 assign w12 = w11;
 assign w13 = w11;
 assign w13 = w12;
 assign w15 = w14;
 assign w16 = w14;
 assign w16 = w15;
 assign w19 = w18;
 assign w20 = w18;
 assign w20 = w19;
 assign w23 = w5;
 assign w24 = w5;
 assign w24 = w23;
 v438ded v37e36e (
  .v143ae2(w7),
  .v68780b(w12),
  .v078fce(w14),
  .v3525a9(w17),
  .vf2d070(w21),
  .vb414d8(w22),
  .vd82121(w25)
 );
 v1c7dae vfd8fff (
  .ve8318d(w4),
  .va4102a(w13),
  .vf54559(w24)
 );
 vb2090f v91590d (
  .vcbab45(w5),
  .v3ca442(w8),
  .v0e28cb(w16)
 );
 vb2090f vffa799 (
  .v3ca442(w2),
  .v0e28cb(w5),
  .vcbab45(w22)
 );
 vb2090f v234ec4 (
  .vcbab45(w3),
  .v3ca442(w4),
  .v0e28cb(w15)
 );
 v816138 v1cb7f5 (
  .v0e28cb(w3),
  .v3ca442(w21),
  .vcbab45(w26)
 );
 va3c966 #(
  .v422d28(p0)
 ) vdd83d2 (
  .v565097(w9),
  .v41eb95(w11),
  .veaee74(w17),
  .va632a5(w18),
  .vf892a0(w23)
 );
 v04dced #(
  .v8d305c(p1)
 ) ve73b5c (
  .vbfafa4(w9),
  .v56adce(w18)
 );
 v2e6917 v95f509 (
  .v18e78c(w2),
  .v7b3e89(w10),
  .v6c4cc1(w20)
 );
 v33e7c0 #(
  .vc5c8ea(p6)
 ) v065438 (
  .vfc34be(w10)
 );
endmodule

/*-------------------------------------------------*/
/*-- count-4bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- M√°quina de contar, de 4 bits
/*-------------------------------------------------*/
//---- Top entity
module v1c7dae #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 v1c7dae_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Biestable-D  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato
/*-------------------------------------------------*/

module v1c7dae_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output q
);
 reg q = INI;
 always @(posedge clk)
   q <= d;
endmodule
//---- Top entity
module vb2090f (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb2090f_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- AND  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta AND
/*-------------------------------------------------*/

module vb2090f_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule
//---- Top entity
module v816138 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v816138_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- OR  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Puerta OR
/*-------------------------------------------------*/

module v816138_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta OR
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a | b;
 
 //-- endmodule
endmodule
//---- Top entity
module v2e6917 (
 input [3:0] v7b3e89,
 input [3:0] v6c4cc1,
 output v18e78c
);
 wire w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign v18e78c = w0;
 assign w1 = v6c4cc1;
 assign w2 = v7b3e89;
 v2e6917_vd75681 vd75681 (
  .eq(w0),
  .b(w1),
  .a(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Comparador de dos operandos  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Comparador de dos operandos de 4 bits
/*-------------------------------------------------*/

module v2e6917_vd75681 (
 input [3:0] a,
 input [3:0] b,
 output eq
);
 assign eq = (a == b);
endmodule
//---- Top entity
module v33e7c0 #(
 parameter vc5c8ea = 1
) (
 output [3:0] vfc34be
);
 localparam p0 = vc5c8ea;
 wire [0:3] w1;
 assign vfc34be = w1;
 v33e7c0_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Constante-4bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor gen√©rico constante (menos 1), de 4 bits. Su valor se introduce como par√°metro. Por defecto vale 0
/*-------------------------------------------------*/

module v33e7c0_v465065 #(
 parameter VALUE = 0
) (
 output [3:0] k
);
 assign k = VALUE-1;
endmodule
//---- Top entity
module v4e77a0 #(
 parameter vc96e81 = 0
) (
 input v4a6801,
 input v3ba3e6,
 input [15:0] v545269,
 input v9bfaa9,
 input v7d29fb,
 output v0d3330,
 output [15:0] v1c583b
);
 localparam p0 = vc96e81;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:15] w6;
 wire [0:15] w7;
 assign w1 = v4a6801;
 assign w2 = v3ba3e6;
 assign w3 = v7d29fb;
 assign w4 = v9bfaa9;
 assign v0d3330 = w5;
 assign w6 = v545269;
 assign v1c583b = w7;
 v4e77a0_v768248 #(
  .INI(p0)
 ) v768248 (
  .clk(w1),
  .si(w2),
  .shift(w3),
  .load(w4),
  .so(w5),
  .d(w6),
  .q(w7)
 );
endmodule

/*-------------------------------------------------*/
/*-- shift-load-register-16bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 16bits Shift register (left) with load
/*-------------------------------------------------*/

module v4e77a0_v768248 #(
 parameter INI = 0
) (
 input clk,
 input si,
 input [15:0] d,
 input load,
 input shift,
 output so,
 output [15:0] q
);
 //-- Numero de bits el registros de desplazamiento
 localparam N = 16;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
   else if (shift)
     q <= {q[N-2:0], si};
     
 //-- Sacar el bit de mayor peso por serial-out    
 assign so = q[N-1];
endmodule
//---- Top entity
module vfa0a5e #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input [3:0] v565097,
 input vf892a0,
 output [3:0] va632a5
);
 localparam p0 = v422d28;
 wire w1;
 wire w2;
 wire [0:3] w3;
 wire [0:3] w4;
 assign w1 = vf892a0;
 assign w2 = v41eb95;
 assign w3 = v565097;
 assign va632a5 = w4;
 vfa0a5e_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .load(w1),
  .clk(w2),
  .d(w3),
  .q(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Registro  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 4 bits
/*-------------------------------------------------*/

module vfa0a5e_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input [3:0] d,
 input load,
 output [3:0] q
);
 localparam N = 4;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (load)
     q <= d;
endmodule
//---- Top entity
module v622899 (
 input [3:0] ve6b4f6,
 input [3:0] vae4977,
 input [3:0] v220323,
 input [3:0] v8010da,
 input [3:0] v12b9fb,
 input [3:0] vf097c4,
 input [3:0] v3bc648,
 input [3:0] vc4a24a,
 input [2:0] v97d40b,
 output [3:0] v65cd9b
);
 wire [0:3] w0;
 wire [0:2] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire [0:3] w8;
 wire [0:3] w9;
 assign v65cd9b = w0;
 assign w1 = v97d40b;
 assign w2 = vc4a24a;
 assign w3 = v3bc648;
 assign w4 = vf097c4;
 assign w5 = v12b9fb;
 assign w6 = v8010da;
 assign w7 = v220323;
 assign w8 = vae4977;
 assign w9 = ve6b4f6;
 v622899_ve4e0df ve4e0df (
  .o(w0),
  .s(w1),
  .i0(w2),
  .i1(w3),
  .i2(w4),
  .i3(w5),
  .i4(w6),
  .i5(w7),
  .i6(w8),
  .i7(w9)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 8 a 1 de 4 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 8 a 1 de 4 bits
/*-------------------------------------------------*/

module v622899_ve4e0df (
 input [3:0] i7,
 input [3:0] i6,
 input [3:0] i5,
 input [3:0] i4,
 input [3:0] i3,
 input [3:0] i2,
 input [3:0] i1,
 input [3:0] i0,
 input [2:0] s,
 output [3:0] o
);
 //-- Multiplexor de 8 a 1, 
 //-- de 4 bits
 
 assign o = (s == 4'h0) ? i0 :
            (s == 4'h1) ? i1 :
            (s == 4'h2) ? i2 : 
            (s == 4'h3) ? i3 :
            (s == 4'h4) ? i4 :
            (s == 4'h5) ? i5 :
            (s == 4'h6) ? i6 :
            (s == 4'h7) ? i7 : 
            4'h0;
            
 
 
endmodule
//---- Top entity
module va0b8df #(
 parameter vfffc23 = 0
) (
 output [3:0] va50a91
);
 localparam p0 = vfffc23;
 wire [0:3] w1;
 assign va50a91 = w1;
 v9274d3 #(
  .vc5c8ea(p0)
 ) v8800c6 (
  .v00a92d(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Valor_0_4bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor constante 0 para bus de 4 bits
/*-------------------------------------------------*/
//---- Top entity
module v9274d3 #(
 parameter vc5c8ea = 0
) (
 output [3:0] v00a92d
);
 localparam p1 = vc5c8ea;
 wire [0:3] w0;
 assign v00a92d = w0;
 v9274d3_v465065 #(
  .VALUE(p1)
 ) v465065 (
  .k(w0)
 );
endmodule

/*-------------------------------------------------*/
/*-- Constante-4bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor gen√©rico constante, de 4 bits. Su valor se introduce como par√°metro. Por defecto vale 0
/*-------------------------------------------------*/

module v9274d3_v465065 #(
 parameter VALUE = 0
) (
 output [3:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module v917222 (
 input [3:0] v285646,
 input [3:0] v766044,
 output [7:0] va191ad
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:7] w2;
 assign w0 = v766044;
 assign w1 = v285646;
 assign va191ad = w2;
 v917222_v9a2a06 v9a2a06 (
  .i0(w0),
  .i1(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Agregador-bus  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 buses de 4-bits a bus de 8-bits
/*-------------------------------------------------*/

module v917222_v9a2a06 (
 input [3:0] i1,
 input [3:0] i0,
 output [7:0] o
);
 assign o = {i1, i0};
 
endmodule
//---- Top entity
module v7d7474 #(
 parameter v8d305c = 1
) (
 input [7:0] ve41da3,
 output [7:0] v9c083a
);
 localparam p0 = v8d305c;
 wire [0:7] w1;
 wire [0:7] w2;
 assign w1 = ve41da3;
 assign v9c083a = w2;
 v7d7474_va0c26a #(
  .k(p0)
 ) va0c26a (
  .a(w1),
  .s(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- sum-1op-8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de un operando de 8 bits con una constante pasada como par√°metro (No hay accarreo)
/*-------------------------------------------------*/

module v7d7474_va0c26a #(
 parameter k = 0
) (
 input [7:0] a,
 output [7:0] s
);
 assign s = a + k;
endmodule
//---- Top entity
module vc6459c #(
 parameter ved2ada = 115200
) (
 input ve9a78f,
 input [7:0] v19b8dd,
 input v05e99b,
 output v8caaa5,
 output v2da441,
 output v01321e
);
 localparam p1 = ved2ada;
 wire w0;
 wire w2;
 wire [0:7] w3;
 wire w4;
 wire w5;
 wire w6;
 assign v8caaa5 = w0;
 assign w2 = ve9a78f;
 assign w3 = v19b8dd;
 assign w4 = v05e99b;
 assign v2da441 = w5;
 assign v01321e = w6;
 vc6459c_vedebcc #(
  .BAUD(p1)
 ) vedebcc (
  .TX(w0),
  .clk(w2),
  .data(w3),
  .txmit(w4),
  .busy(w5),
  .done(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Serial-tx  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transmisor serie
/*-------------------------------------------------*/

module vc6459c_vedebcc #(
 parameter BAUD = 0
) (
 input clk,
 input [7:0] data,
 input txmit,
 output TX,
 output busy,
 output done
);
 //-- Constantes para obtener las velocidades est√°ndares
 `define B115200 104 
 `define B57600  208
 `define B38400  313
 `define B19200  625
 `define B9600   1250
 `define B4800   2500
 `define B2400   5000
 `define B1200   10000
 `define B600    20000
 `define B300    40000
 
 //-- Constante para calcular los baudios
 localparam BAUDRATE = (BAUD==115200) ? `B115200 : //-- OK
                       (BAUD==57600)  ? `B57600  : //-- OK
                       (BAUD==38400)  ? `B38400  : //-- Ok
                       (BAUD==19200)  ? `B19200  : //-- OK
                       (BAUD==9600)   ? `B9600   : //-- OK
                       (BAUD==4800)   ? `B4800   : //-- OK 
                       (BAUD==2400)   ? `B2400   : //-- OK
                       (BAUD==1200)   ? `B1200   : //-- OK
                       (BAUD==600)    ? `B600    : //-- OK
                       (BAUD==300)    ? `B300    : //-- OK
                       `B115200 ;  //-- Por defecto 115200 baudios
 
 
 //---- GENERADOR DE BAUDIOS
 
 //-- Calcular el numero dde bits para almacenar el divisor
 localparam N = $clog2(BAUDRATE);
 
 //-- Contador para implementar el divisor
 //-- Es un contador modulo BAUDRATE
 reg [N-1:0] divcounter = 0;
 
 //-- Cable de reset para el contador
 //-- Comparador que resetea el contador cuando se alcanza el tope
 //-- o cuando el estado del biestable es 0 (apagado)
 wire reset = ov_gen | (state == 0);
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Hemos llegado al final
 wire ov_gen = (divcounter == BAUDRATE-1);
 
 
 
 //-- REGISTRO DESPLAZAMIENTO
 
 //-- Salida serie. Inicialmete a 1 (reposo) 
 reg TX = 1;
 
 //-- Registro de desplazamiento de 9 bits
 //-- Inicializado todo a 1s
 reg [8:0] q = 9'h1FF;
 
 //-- La entrada de shift es la salida del generador de baudios
 wire shift = ov_gen;
 
 always @(posedge clk)
   if (txmit_tic)
   //-- Carga del registro
     q <= {data, 1'b0};
     
   else if (shift)
     //-- Desplazamiento. Rellenar con 1 (bit de stop)
     q <= {1'b1, q[8:1]};
     
 //-- Sacar el bit de menor peso por serial-out    
 wire so;
 assign so = q[0];
 
 //-- La salida tx la registramos
 always @(posedge clk)
   TX <= so;
   
 //-- La se√±al de entrada txmit se pasa por un 
 //-- detector de flancos de subida para generar un tic
 reg q_re = 0;
 wire txmit_tic;
 
 always @(posedge clk)
   q_re <= txmit;
   
 assign txmit_tic = (~q_re & txmit);  
 
 
 
 //-- Estado de transmisor
 //-- 0: Parado
 //-- 1: Ocupado (transmitiendo)
 reg state = 0;
   
 always @(posedge clk)
   //-- Empieza la transmision: ocupado
   if (txmit)
     state <= 1'b1;
     
   //-- Acaba la transmision: libre    
   else if (ov)
     state <= 1'b0;
 
 //-- Contador de bits enviados
 reg [3:0] bits = 0;
 always @(posedge clk)
   //-- Si la cuenta ha terminado... volver a 0
   if (ov)
     bits <= 2'b00;
   else
     if (shift)
       bits <= bits + 1;
 
 //-- Comprobar si se ha transmitido el √∫ltimo bit (overflow)
 //-- 1 bit de start + 8 bits de datos + 1 bit de stop
 wire ov = (bits == 10);
 
 //-- La se√±al de ocupado es el estado del transmisor
 assign busy = state;
 
 //-- La se√±al de done es la de overflow pero retrasada un
 //-- periodo de reloj del sistema y que el biestable 
 //-- llegue al estado de parado antes de que se 
 //-- empiece otra transmision
 
 reg done=0;
 
 always @(posedge clk)
   done <= ov;
 
endmodule
//---- Top entity
module ve308ae #(
 parameter vaceb8f = 8,
 parameter vc633fb = 1,
 parameter vd99aad = 0
) (
 input v192615,
 input vbdbcb4,
 input v87e8cb,
 output v680136,
 output [2:0] v8b9e30,
 output v69602e,
 output v8314fa
);
 localparam p0 = vd99aad;
 localparam p1 = vc633fb;
 localparam p6 = vaceb8f;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w7;
 wire w8;
 wire [0:2] w9;
 wire [0:2] w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire [0:2] w18;
 wire [0:2] w19;
 wire [0:2] w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 wire w25;
 wire w26;
 assign w7 = vbdbcb4;
 assign w8 = v87e8cb;
 assign w11 = v192615;
 assign w12 = v192615;
 assign w13 = v192615;
 assign v680136 = w14;
 assign v8b9e30 = w19;
 assign v8314fa = w25;
 assign v69602e = w26;
 assign w12 = w11;
 assign w13 = w11;
 assign w13 = w12;
 assign w15 = w14;
 assign w16 = w14;
 assign w16 = w15;
 assign w19 = w18;
 assign w20 = w18;
 assign w20 = w19;
 assign w23 = w5;
 assign w24 = w5;
 assign w24 = w23;
 v438ded v37e36e (
  .v143ae2(w7),
  .v68780b(w12),
  .v078fce(w14),
  .v3525a9(w17),
  .vf2d070(w21),
  .vb414d8(w22),
  .vd82121(w25)
 );
 v1c7dae vfd8fff (
  .ve8318d(w4),
  .va4102a(w13),
  .vf54559(w24)
 );
 vb2090f v91590d (
  .vcbab45(w5),
  .v3ca442(w8),
  .v0e28cb(w16)
 );
 vb2090f vffa799 (
  .v3ca442(w2),
  .v0e28cb(w5),
  .vcbab45(w22)
 );
 vb2090f v234ec4 (
  .vcbab45(w3),
  .v3ca442(w4),
  .v0e28cb(w15)
 );
 v816138 v1cb7f5 (
  .v0e28cb(w3),
  .v3ca442(w21),
  .vcbab45(w26)
 );
 v3048aa #(
  .v422d28(p0)
 ) vdc0aad (
  .v966e9d(w10),
  .v41eb95(w11),
  .veaee74(w17),
  .v232358(w18),
  .vf892a0(w23)
 );
 vb40da6 v8f26c8 (
  .v18e78c(w2),
  .v2e7398(w9),
  .v2af1cd(w20)
 );
 ve81274 #(
  .vc5c8ea(p6)
 ) v03d8cb (
  .v95ded6(w9)
 );
 v46aa41 #(
  .v8d305c(p1)
 ) v44f396 (
  .v6f3450(w10),
  .vba2ef8(w18)
 );
endmodule

/*-------------------------------------------------*/
/*-- count-04-2bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- M√°quina de contar, de 2 bits (cuenta hasta 4 ciclos)
/*-------------------------------------------------*/
//---- Top entity
module v3048aa #(
 parameter v422d28 = 0
) (
 input v41eb95,
 input veaee74,
 input [2:0] v966e9d,
 input vf892a0,
 output [2:0] v232358
);
 localparam p0 = v422d28;
 wire w1;
 wire w2;
 wire w3;
 wire [0:2] w4;
 wire [0:2] w5;
 assign w1 = vf892a0;
 assign w2 = v41eb95;
 assign w3 = veaee74;
 assign w4 = v966e9d;
 assign v232358 = w5;
 v3048aa_v9148cb #(
  .INI(p0)
 ) v9148cb (
  .load(w1),
  .clk(w2),
  .rst(w3),
  .d(w4),
  .q(w5)
 );
endmodule

/*-------------------------------------------------*/
/*-- Registro  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Registro de 3 bits con entrada de reset
/*-------------------------------------------------*/

module v3048aa_v9148cb #(
 parameter INI = 0
) (
 input clk,
 input rst,
 input [2:0] d,
 input load,
 output [2:0] q
);
 localparam N = 3;
 
 reg [N-1:0] q = INI;
 
 always @(posedge clk)
   if (rst)
     q <= 0;
   else
     if (load)
       q <= d;
endmodule
//---- Top entity
module vb40da6 (
 input [2:0] v2e7398,
 input [2:0] v2af1cd,
 output v18e78c
);
 wire w0;
 wire [0:2] w1;
 wire [0:2] w2;
 assign v18e78c = w0;
 assign w1 = v2af1cd;
 assign w2 = v2e7398;
 vb40da6_vd75681 vd75681 (
  .eq(w0),
  .b(w1),
  .a(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Comparador de dos operandos  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Comparador de dos operandos de 3 bits
/*-------------------------------------------------*/

module vb40da6_vd75681 (
 input [2:0] a,
 input [2:0] b,
 output eq
);
 assign eq = (a == b);
endmodule
//---- Top entity
module ve81274 #(
 parameter vc5c8ea = 1
) (
 output [2:0] v95ded6
);
 localparam p0 = vc5c8ea;
 wire [0:2] w1;
 assign v95ded6 = w1;
 ve81274_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Constante-3bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor gen√©rico constante (menos 1), de 3 bits. Su valor se introduce como par√°metro. Por defecto vale 0
/*-------------------------------------------------*/

module ve81274_v465065 #(
 parameter VALUE = 0
) (
 output [2:0] k
);
 assign k = VALUE-1;
endmodule
//---- Top entity
module v46aa41 #(
 parameter v8d305c = 1
) (
 input [2:0] vba2ef8,
 output [2:0] v6f3450
);
 localparam p0 = v8d305c;
 wire [0:2] w1;
 wire [0:2] w2;
 assign w1 = vba2ef8;
 assign v6f3450 = w2;
 v46aa41_va0c26a #(
  .k(p0)
 ) va0c26a (
  .a(w1),
  .s(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- sum-1op-3bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Sumador de un operando de 3 bits con una constante pasada como par√°metro (No hay accarreo)
/*-------------------------------------------------*/

module v46aa41_va0c26a #(
 parameter k = 0
) (
 input [2:0] a,
 output [2:0] s
);
 assign s = a + k;
endmodule
//---- Top entity
module v359a55 (
 input [7:0] v02d898,
 input [7:0] vd6b984,
 input v50d6c6,
 output [7:0] vf24dba
);
 wire w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 assign w0 = v50d6c6;
 assign w1 = vd6b984;
 assign w2 = v02d898;
 assign vf24dba = w3;
 v359a55_ve4e0df ve4e0df (
  .sel(w0),
  .i0(w1),
  .i1(w2),
  .o(w3)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 2 a 1 de 8 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 2 a 1 de 8 bits
/*-------------------------------------------------*/

module v359a55_ve4e0df (
 input [7:0] i1,
 input [7:0] i0,
 input sel,
 output [7:0] o
);
 //-- Multiplexor de 2 a 1, 
 //-- de 8 bits
 
 reg [7:0] o;
 
 always @(*) begin
     case(sel)
         0: o = i0;
         1: o = i1;
         default: o = i0;
     endcase
 end
 
 
endmodule
//---- Top entity
module v53f10a #(
 parameter vfffc23 = 15
) (
 output [3:0] va50a91
);
 localparam p0 = vfffc23;
 wire [0:3] w1;
 assign va50a91 = w1;
 v9274d3 #(
  .vc5c8ea(p0)
 ) v8800c6 (
  .v00a92d(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Valor_15_4bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor constante 15 para bus de 4 bits
/*-------------------------------------------------*/
//---- Top entity
module v0b4097 #(
 parameter v6b316b = 0
) (
 input [3:0] vdb52ce,
 output v18e78c
);
 localparam p1 = v6b316b;
 wire w0;
 wire [0:3] w2;
 assign v18e78c = w0;
 assign w2 = vdb52ce;
 v0b4097_vd75681 #(
  .K(p1)
 ) vd75681 (
  .eq(w0),
  .a(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Comparador  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Comparador de un operando de 4 bits. Se compara si el operando es igual al par√°metro
/*-------------------------------------------------*/

module v0b4097_vd75681 #(
 parameter K = 0
) (
 input [3:0] a,
 output eq
);
 assign eq = (a == K);
endmodule
//---- Top entity
module va0b5a4 #(
 parameter vfffc23 = "\n"
) (
 output [7:0] vb096dc
);
 localparam p0 = vfffc23;
 wire [0:7] w1;
 assign vb096dc = w1;
 v5ad97e #(
  .vc5c8ea(p0)
 ) v68b2cc (
  .v26dbdb(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Valor_ASCII-LF  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- C√≥digo ASCII del car√°cter LF
/*-------------------------------------------------*/
//---- Top entity
module v5ad97e #(
 parameter vc5c8ea = 0
) (
 output [7:0] v26dbdb
);
 localparam p0 = vc5c8ea;
 wire [0:7] w1;
 assign v26dbdb = w1;
 v5ad97e_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Constante-8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor gen√©rico constante, de 8 bits. Su valor se introduce como par√°metro. Por defecto vale 0
/*-------------------------------------------------*/

module v5ad97e_v465065 #(
 parameter VALUE = 0
) (
 output [7:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module v1e224f (
 input [7:0] v385b9c,
 input [7:0] vd34531,
 output [15:0] v4d4dee
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:15] w2;
 assign w0 = vd34531;
 assign w1 = v385b9c;
 assign v4d4dee = w2;
 v1e224f_v9a2a06 v9a2a06 (
  .i0(w0),
  .i1(w1),
  .o(w2)
 );
endmodule

/*-------------------------------------------------*/
/*-- Agregador-bus  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Agregador de 2 buses de 8-bits a bus de 16-bits
/*-------------------------------------------------*/

module v1e224f_v9a2a06 (
 input [7:0] i1,
 input [7:0] i0,
 output [15:0] o
);
 assign o = {i1, i0};
 
endmodule
//---- Top entity
module v3bf99b #(
 parameter vfffc23 = 0
) (
 output [7:0] vb096dc
);
 localparam p0 = vfffc23;
 wire [0:7] w1;
 assign vb096dc = w1;
 v5ad97e #(
  .vc5c8ea(p0)
 ) v68b2cc (
  .v26dbdb(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Valor_0_8bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Valor constante 0 para bus de 8 bits
/*-------------------------------------------------*/
//---- Top entity
module va9a5bc #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 va9a5bc_v6cac2f #(
  .SEC(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-Sec  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Coraz√≥n de bombeo de tics a con periodo param√©trico de segundos
/*-------------------------------------------------*/

module va9a5bc_v6cac2f #(
 parameter SEC = 0
) (
 input clk,
 output o
);
 //localparam SEC;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000*SEC;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la se√±al de overflow
 assign o = reset;
 
 
 
 
endmodule
