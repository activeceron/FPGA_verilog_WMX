// Code generated by Icestudio 0.7.1w202109100309

`default_nettype none

//---- Top entity
module main (
 input vclk,
 output v15e0da,
 output [0:7] vinit
);
 wire [0:2] w0;
 wire w1;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 wire [0:7] w5;
 wire [0:7] w6;
 wire [0:7] w7;
 wire [0:7] w8;
 wire [0:7] w9;
 wire [0:7] w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 assign v15e0da = w12;
 assign w13 = vclk;
 assign w14 = vclk;
 assign w15 = vclk;
 assign w11 = w1;
 assign w14 = w13;
 assign w15 = w13;
 assign w15 = w14;
 v76e9bf v457a2e (
  .v97d40b(w0),
  .v71c62f(w2),
  .va541fd(w3),
  .v9b8a50(w4),
  .v30db33(w5),
  .vbdd51f(w6),
  .v21e136(w7),
  .v062092(w8),
  .v3d1227(w9),
  .v3fb88b(w10)
 );
 v764691 vb2e1f0 (
  .vf4a676(w0),
  .v7c533e(w1),
  .vdd729a(w13)
 );
 va9a5bc v8d897d (
  .v2a8434(w1),
  .vac0eb2(w14)
 );
 main_v5f4b3e v5f4b3e (
  .o(w2)
 );
 main_v897eaf v897eaf (
  .o(w3)
 );
 main_v5fdaaf v5fdaaf (
  .o(w4)
 );
 main_v6b904c v6b904c (
  .o(w5)
 );
 main_v69a689 v69a689 (
  .o(w6)
 );
 main_v14d994 v14d994 (
  .o(w7)
 );
 main_v6f6421 v6f6421 (
  .o(w8)
 );
 main_v5ed050 v5ed050 (
  .o(w9)
 );
 vc6459c v196656 (
  .v19b8dd(w10),
  .v05e99b(w11),
  .v8caaa5(w12),
  .ve9a78f(w15)
 );
 assign vinit = 8'b00000000;
endmodule

/*-------------------------------------------------*/
/*--   */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- 
/*-------------------------------------------------*/
//---- Top entity
module v76e9bf (
 input [7:0] v71c62f,
 input [7:0] va541fd,
 input [7:0] v9b8a50,
 input [7:0] v30db33,
 input [7:0] vbdd51f,
 input [7:0] v21e136,
 input [7:0] v062092,
 input [7:0] v3d1227,
 input [2:0] v97d40b,
 output [7:0] v3fb88b
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:2] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 wire [0:7] w5;
 wire [0:7] w6;
 wire [0:7] w7;
 wire [0:7] w8;
 wire [0:7] w9;
 assign v3fb88b = w0;
 assign w1 = v062092;
 assign w2 = v97d40b;
 assign w3 = v3d1227;
 assign w4 = v21e136;
 assign w5 = vbdd51f;
 assign w6 = v30db33;
 assign w7 = v71c62f;
 assign w8 = va541fd;
 assign w9 = v9b8a50;
 v76e9bf_ve4e0df ve4e0df (
  .o(w0),
  .i1(w1),
  .s(w2),
  .i0(w3),
  .i2(w4),
  .i3(w5),
  .i4(w6),
  .i7(w7),
  .i6(w8),
  .i5(w9)
 );
endmodule

/*-------------------------------------------------*/
/*-- Mux 8 a 1 de 8 bits  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Multiplexor de 8 a 1 de 8 bits
/*-------------------------------------------------*/

module v76e9bf_ve4e0df (
 input [7:0] i7,
 input [7:0] i6,
 input [7:0] i5,
 input [7:0] i4,
 input [7:0] i3,
 input [7:0] i2,
 input [7:0] i1,
 input [7:0] i0,
 input [2:0] s,
 output [7:0] o
);
 //-- Multiplexor de 8 a 1, 
 //-- de 8 bits
 
 assign o = (s == 3'h0) ? i0 :
            (s == 3'h1) ? i1 :
            (s == 3'h2) ? i2 : 
            (s == 3'h3) ? i3 :
            (s == 3'h4) ? i4 :
            (s == 3'h5) ? i5 :
            (s == 3'h6) ? i6 :i7;
            
 
 
endmodule
//---- Top entity
module v764691 #(
 parameter v5e4a03 = 8
) (
 input vdd729a,
 input v7c533e,
 output [2:0] vf4a676,
 output v712cd1
);
 localparam p0 = v5e4a03;
 wire w1;
 wire w2;
 wire w3;
 wire [0:2] w4;
 assign w1 = v7c533e;
 assign w2 = vdd729a;
 assign v712cd1 = w3;
 assign vf4a676 = w4;
 v764691_vbd6086 #(
  .M(p0)
 ) vbd6086 (
  .cnt(w1),
  .clk(w2),
  .ov(w3),
  .q(w4)
 );
endmodule

/*-------------------------------------------------*/
/*-- Contador-3bits-up-rst  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Contador módulo M, ascendente, de 3 bits
/*-------------------------------------------------*/

module v764691_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input cnt,
 output [2:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 3; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (ov)
     qi <= 2'b00;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule
//---- Top entity
module va9a5bc #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 va9a5bc_v6cac2f #(
  .SEC(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

/*-------------------------------------------------*/
/*-- Corazon-tic-Sec  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Corazón de bombeo de tics a con periodo paramétrico de segundos
/*-------------------------------------------------*/

module va9a5bc_v6cac2f #(
 parameter SEC = 0
) (
 input clk,
 output o
);
 //localparam SEC;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000*SEC;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule
//---- Top entity
module vc6459c #(
 parameter ved2ada = 115200
) (
 input ve9a78f,
 input [7:0] v19b8dd,
 input v05e99b,
 output v8caaa5,
 output v2da441,
 output v01321e
);
 localparam p1 = ved2ada;
 wire w0;
 wire w2;
 wire [0:7] w3;
 wire w4;
 wire w5;
 wire w6;
 assign v8caaa5 = w0;
 assign w2 = ve9a78f;
 assign w3 = v19b8dd;
 assign w4 = v05e99b;
 assign v2da441 = w5;
 assign v01321e = w6;
 vc6459c_vedebcc #(
  .BAUD(p1)
 ) vedebcc (
  .TX(w0),
  .clk(w2),
  .data(w3),
  .txmit(w4),
  .busy(w5),
  .done(w6)
 );
endmodule

/*-------------------------------------------------*/
/*-- Serial-tx  */
/*-- - - - - - - - - - - - - - - - - - - - - - - --*/
/*-- Transmisor serie
/*-------------------------------------------------*/

module vc6459c_vedebcc #(
 parameter BAUD = 0
) (
 input clk,
 input [7:0] data,
 input txmit,
 output TX,
 output busy,
 output done
);
 //-- Constantes para obtener las velocidades estándares
 `define B115200 104 
 `define B57600  208
 `define B38400  313
 `define B19200  625
 `define B9600   1250
 `define B4800   2500
 `define B2400   5000
 `define B1200   10000
 `define B600    20000
 `define B300    40000
 
 //-- Constante para calcular los baudios
 localparam BAUDRATE = (BAUD==115200) ? `B115200 : //-- OK
                       (BAUD==57600)  ? `B57600  : //-- OK
                       (BAUD==38400)  ? `B38400  : //-- Ok
                       (BAUD==19200)  ? `B19200  : //-- OK
                       (BAUD==9600)   ? `B9600   : //-- OK
                       (BAUD==4800)   ? `B4800   : //-- OK 
                       (BAUD==2400)   ? `B2400   : //-- OK
                       (BAUD==1200)   ? `B1200   : //-- OK
                       (BAUD==600)    ? `B600    : //-- OK
                       (BAUD==300)    ? `B300    : //-- OK
                       `B115200 ;  //-- Por defecto 115200 baudios
 
 
 //---- GENERADOR DE BAUDIOS
 
 //-- Calcular el numero dde bits para almacenar el divisor
 localparam N = $clog2(BAUDRATE);
 
 //-- Contador para implementar el divisor
 //-- Es un contador modulo BAUDRATE
 reg [N-1:0] divcounter = 0;
 
 //-- Cable de reset para el contador
 //-- Comparador que resetea el contador cuando se alcanza el tope
 //-- o cuando el estado del biestable es 0 (apagado)
 wire reset = ov_gen | (state == 0);
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Hemos llegado al final
 wire ov_gen = (divcounter == BAUDRATE-1);
 
 
 
 //-- REGISTRO DESPLAZAMIENTO
 
 //-- Salida serie. Inicialmete a 1 (reposo) 
 reg TX = 1;
 
 //-- Registro de desplazamiento de 9 bits
 //-- Inicializado todo a 1s
 reg [8:0] q = 9'h1FF;
 
 //-- La entrada de shift es la salida del generador de baudios
 wire shift = ov_gen;
 
 always @(posedge clk)
   if (txmit_tic)
   //-- Carga del registro
     q <= {data, 1'b0};
     
   else if (shift)
     //-- Desplazamiento. Rellenar con 1 (bit de stop)
     q <= {1'b1, q[8:1]};
     
 //-- Sacar el bit de menor peso por serial-out    
 wire so;
 assign so = q[0];
 
 //-- La salida tx la registramos
 always @(posedge clk)
   TX <= so;
   
 //-- La señal de entrada txmit se pasa por un 
 //-- detector de flancos de subida para generar un tic
 reg q_re = 0;
 wire txmit_tic;
 
 always @(posedge clk)
   q_re <= txmit;
   
 assign txmit_tic = (~q_re & txmit);  
 
 
 
 //-- Estado de transmisor
 //-- 0: Parado
 //-- 1: Ocupado (transmitiendo)
 reg state = 0;
   
 always @(posedge clk)
   //-- Empieza la transmision: ocupado
   if (txmit)
     state <= 1'b1;
     
   //-- Acaba la transmision: libre    
   else if (ov)
     state <= 1'b0;
 
 //-- Contador de bits enviados
 reg [3:0] bits = 0;
 always @(posedge clk)
   //-- Si la cuenta ha terminado... volver a 0
   if (ov)
     bits <= 2'b00;
   else
     if (shift)
       bits <= bits + 1;
 
 //-- Comprobar si se ha transmitido el último bit (overflow)
 //-- 1 bit de start + 8 bits de datos + 1 bit de stop
 wire ov = (bits == 10);
 
 //-- La señal de ocupado es el estado del transmisor
 assign busy = state;
 
 //-- La señal de done es la de overflow pero retrasada un
 //-- periodo de reloj del sistema y que el biestable 
 //-- llegue al estado de parado antes de que se 
 //-- empiece otra transmision
 
 reg done=0;
 
 always @(posedge clk)
   done <= ov;
 
endmodule

module main_v5f4b3e (
 output [7:0] o
);
 
 assign o="\n";
 
endmodule

module main_v897eaf (
 output [7:0] o
);
 
 assign o="K";
 
endmodule

module main_v5fdaaf (
 output [7:0] o
);
 
 assign o="O";
 
endmodule

module main_v6b904c (
 output [7:0] o
);
 
 assign o=" ";
 
endmodule

module main_v69a689 (
 output [7:0] o
);
 
 assign o="A";
 
endmodule

module main_v14d994 (
 output [7:0] o
);
 
 assign o="L";
 
endmodule

module main_v6f6421 (
 output [7:0] o
);
 
 assign o="O";
 
endmodule

module main_v5ed050 (
 output [7:0] o
);
 
 assign o="H";
 
endmodule
